name: 'tags-sync'
author: 'chachako'
description: 'Sync another repository new tags as branches. (upstream -> fork)'

branding:
  icon: 'git-branch'
  color: 'gray-dark'

inputs:
  github-token:
    description: >
      Personal access token (PAT) used to fetch and push the "head-repository".
      
      
      We recommend using a service account with the least permissions necessary.
      Also when generating a new PAT, select the least scopes necessary.
      
      
      [Learn more about creating and using encrypted secrets](https://help.github.com/en/actions/automating-your-workflow-with-github-actions/creating-and-using-encrypted-secrets)
    required: true
  base-repository:
    description: 'Base (upstream) repository name with owner. For example, torvalds/linux'
    required: true
  head-repository:
    description: 'Head (fork) repository name with owner. For example, Rust-for-Linux/linux'
    default: ${{ github.repository }}
  cloned-path:
    description: 'Relative path under $GITHUB_WORKSPACE to clone the head repository'
    default: 'head-repo'
  filter-tags:
    description: >
      Filter tags by regular expression. For example, the regex "^v[2-9]\..*" controls
      tags that only sync versions larger than `v2`.
    default: '.*'
  apply-patch:
    description: >
      URL of patch file to be applied after each tag is synced as a branch. Patch url can
      usually be obtained by comparing two branches or commits.
      
      
      The process of applying patch occurs before the "git push", so if the value is
      empty, it means that all new branches will be pushed directly to the "head-repository"
      after the tags are synced.
      
      
      The value based on the [URL Standard](https://url.spec.whatwg.org/).
      
      
      For example, apply all commits that the "head-repository" master branch is ahead
      of the "base-repository" master branch to each new tag:
      
      
      https://github.com/base-owner/base-repository/compare/master...head-owner:head-repository:master.patch
  patch-message:
    description: 'Commit message for "git commit" when applying patch'
    default: ''
  patch-author:
    description: 'Author for "git commit" when applying patch'
    default: 'github-actions[bot]'
  patch-author-email:
    description: 'Author email for "git commit" when applying patch'
    default: 'github-actions[bot]@users.noreply.github.com'
  patch-committer:
    description: 'Committer for "git commit" when applying patch'
    default: 'github-actions[bot]'
  patch-committer-email:
    description: 'Committer email for "git commit" when applying patch'
    default: 'github-actions[bot]@users.noreply.github.com'

outputs:
  new-tags-file:
    value: ${{ steps.new-tags.outputs.new-tags }}
    description: >
      A file stores the name of each new tag of the "base-repository" by line.
  synced-branches-file:
    value: ${{ steps.new-tags.outputs.synced-branches }}
    description: >
      A file stores the name of each new branch of the "head-repository" by line, and
      all new branches are synchronized from new tags of the "base-repository".

runs:
  using: 'composite'
  steps:
    - uses: actions/checkout@v3
    - uses: dtolnay/rust-toolchain@stable
    - uses: Swatinem/rust-cache@v2

    - name: Configure environment variables
      shell: bash
      run: |
        echo "Configure environment variables..."
        echo "RUST_LOG=DEBUG" >> $GITHUB_ENV
        echo "RUST_BACKTRACE=full" >> $GITHUB_ENV
        echo "BASE_REPO=${{ inputs.base-repository }}" >> $GITHUB_ENV
        echo "HEAD_REPO=${{ inputs.head-repository }}" >> $GITHUB_ENV
        echo "CLONED_PATH=${{ inputs.cloned-path }}" >> $GITHUB_ENV
        echo "FILTER_TAGS=${{ inputs.filter-tags }}" >> $GITHUB_ENV
        echo "PATCH_URL=${{ inputs.apply-patch }}" >> $GITHUB_ENV
        echo "PATCH_MESSAGE=${{ inputs.patch-message }}" >> $GITHUB_ENV
        echo "PATCH_AUTHOR=${{ inputs.patch-author }}" >> $GITHUB_ENV
        echo "PATCH_AUTHOR_EMAIL=${{ inputs.patch-author-email }}" >> $GITHUB_ENV
        echo "PATCH_COMMITTER=${{ inputs.patch-committer }}" >> $GITHUB_ENV
        echo "PATCH_COMMITTER_EMAIL=${{ inputs.patch-committer-email }}" >> $GITHUB_ENV
        echo "GITHUB_TOKEN=${{ inputs.github-token }}" >> $GITHUB_ENV

    - name: Detect new tags from base repository
      id: new-tags
      shell: bash
      run: |
        echo "Detect new tags from base repository..."
        cargo run --release Detect

    - name: Configure cache for head repository
      uses: actions/cache@v3
      with:
        path: ${{ github.workspace }}/${{ inputs.cloned-path }}
        key: 'tags-sync-${{ inputs.base-repository }}-${{ hashFiles(steps.new-tags.outputs.new-tags-file) }}'

    - name: Sync new tags to head repository
      if: steps.new-tags.outputs.new-tags-file != ''
      shell: bash
      run: |
        echo "Sync new tags to head repository..."
        cargo run --release Sync

    - name: Nothing to sync
      if: steps.new-tags.outputs.new-tags-file == ''
      shell: bash
      run: echo "Nothing to sync."
